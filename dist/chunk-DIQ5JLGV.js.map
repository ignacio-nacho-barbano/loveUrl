{"version":3,"sources":["../src/next/loveUrlSSRProvider.tsx"],"names":["LoveUrlSSRProvider","options","children","searchParams","useSearchParams","path","usePathname","jsx","LoveUrlProvider","__spreadValues"],"mappings":"sKAMO,IAAMA,CAAAA,CAAqB,CAAC,CAAE,OAAA,CAAAC,CAAAA,CAAS,QAAA,CAAAC,CAAS,CAAA,GAAgD,CACnG,IAAMC,CAAAA,CAAeC,eAAAA,EAAgB,CAC/BC,CAAAA,CAAOC,WAAAA,EAAY,CAEzB,OAAOC,GAAAA,CAACC,CAAAA,CAAA,CAAgB,OAAA,CAASC,CAAAA,CAAA,CAC7B,WAAA,CAAa,IAAM,CAAA,EAAGJ,CAAI,CAAA,EAAGF,CAAAA,CAAa,UAAS,CAAI,CAAA,CAAA,EAAIA,CAAAA,CAAa,QAAA,EAAU,CAAA,CAAA,CAAK,EAAE,CAAA,CAAA,CAAA,CACtFF,CAAAA,CAAAA,CAEF,QAAA,CAAAC,CAAAA,CACL,CAKJ","file":"chunk-DIQ5JLGV.js","sourcesContent":["import { usePathname, useSearchParams } from \"next/navigation\";\nimport { LoveUrlProvider, LoveUrlProviderProps } from \"../react\";\nimport { PropsWithChildren } from \"react\";\n\n\n/** A config provider for using loveUrl with next automatically providing search & path  */\nexport const LoveUrlSSRProvider = ({ options, children }: LoveUrlProviderProps & PropsWithChildren) => {\n    const searchParams = useSearchParams();\n    const path = usePathname();\n\n    return <LoveUrlProvider options={{\n        urlProvider: () => `${path}${searchParams.toString() ? `?${searchParams.toString()}` : ''}`,\n        ...options,\n    }}>\n        {children}\n    </LoveUrlProvider>;\n\n\n\n\n}"]}