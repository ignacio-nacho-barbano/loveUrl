{"version":3,"sources":["../src/internal/buildSearchParams.ts"],"names":["buildNewParamsObject","newParams","current","currentObject","parseLoveUrl","omitBy","__spreadValues","isUndefined","buildSearchParamsQueryString","buildEncodedSearchString"],"mappings":"8JAiCO,IAAMA,CAAAA,CAAuB,CAClCC,CAAAA,CACAC,GAAAA,GACoB,CACpB,IAAIC,CAAAA,CAA8B,EAAC,CAEnC,OAAID,MACFC,CAAAA,CACE,OAAOD,KAAY,QAAA,EAAa,KAAA,GAASA,KAAW,QAAA,GAAYA,GAAAA,CAC5DE,EAAaF,GAAsB,CAAA,CAClCA,KAGFG,MAAAA,CACLC,GAAAA,CAAAA,GAAAA,CAAA,GACKH,CAAAA,CAAAA,CACAF,CAAAA,CAAAA,CAELM,WACF,CACF,CAAA,CAQaC,EAA+B,CAC1CP,CAAAA,CACAC,IAEOO,CAAAA,CACLT,CAAAA,CAAqBC,CAAAA,CAAWC,CAAO,CACzC","file":"chunk-GQ7ABKIC.js","sourcesContent":["import { isUndefined, omitBy } from \"lodash-es\";\nimport {\n  buildEncodedSearchString,\n  type parseAndDecodeSearchStringOptions,\n} from \"./encodeAndDecodeSearchStrings\";\nimport { parseLoveUrl } from \"./parseLoveUrl\";\n\nexport type ParamsObject<T = Record<string, unknown>> = Partial<T>;\nexport type ParamsQuery = URLSearchParams | string;\n\nexport type ParseOptions<T> = {\n  validations?: Partial<Record<keyof T, (value: unknown) => boolean>>;\n} & parseAndDecodeSearchStringOptions<T>;\n\n/** ## Use this together with useSearchParams or any page's params\n * ### Code sample:\n * ```tsx\n * const params = useSearchParams<{name: string, age: number}>();\n * const {name, age} = parseSearchParams(params);\n * ```\n * ### Advantages:\n * - You can type it\n * - You can destructure params\n * - Components will update when any member changes (because you use params here)\n */\n\n/**\n * ## Use this to build a new params object\n * **Undefined** values will be removed, use that to delete a param\n * @param newParams new params to be assigned, re assigned, or deleted\n * @param current your useSearchParams\n * @returns URLSearchParams\n */\nexport const buildNewParamsObject = <T>(\n  newParams: ParamsObject<T>,\n  current?: ParamsQuery | ParamsObject | null\n): ParamsObject<T> => {\n  let currentObject: ParamsObject = {};\n\n  if (current) {\n    currentObject =\n      typeof current === \"string\" || (\"get\" in current && \"append\" in current)\n        ? parseLoveUrl(current as ParamsQuery)\n        : (current as ParamsObject);\n  }\n\n  return omitBy(\n    {\n      ...currentObject,\n      ...newParams,\n    },\n    isUndefined\n  ) as ParamsObject<T>;\n};\n\n/**\n * ## Use this to create a new params string\n * * **Undefined** values will be removed, use that to delete a param\n * @param newParams new params to be assigned, re assigned, or deleted\n * @param current your useSearchParams\n */\nexport const buildSearchParamsQueryString = <T>(\n  newParams: ParamsObject<T>,\n  current?: ParamsQuery | ParamsObject | null\n): string => {\n  return buildEncodedSearchString(\n    buildNewParamsObject(newParams, current) as Record<string, string>\n  );\n};\n"]}