{"version":3,"sources":["../src/react/useLoveUrlProvider.tsx"],"names":["LoveUrlContext","createContext","useLoveUrlProvider","useContext","LoveUrlProvider","options","children","configRef","useRef","initializeLoveUrl","jsx"],"mappings":"uIASMA,CAAAA,CAAiBC,aAAAA,CAAiC,EAAE,CAAA,CAE7CC,EAAqB,IAAMC,UAAAA,CAA8BH,CAAc,CAAA,CAGvEI,CAAAA,CAAkB,CAAC,CAAE,OAAA,CAAAC,CAAAA,CAAS,SAAAC,CAAS,CAAA,GAAgD,CAChG,IAAMC,CAAAA,CAAYC,MAAAA,CAAOC,GAAAA,CAAkBJ,CAAO,CAAC,EAEnD,OAAOK,GAAAA,CAACV,EAAe,QAAA,CAAf,CAAwB,MAAOO,CAAAA,CAAU,OAAA,CAC3C,QAAA,CAAAD,CAAAA,CACN,CAKJ","file":"chunk-HQPKHIBE.js","sourcesContent":["import { initializeLoveUrl, LoveUrlConfig } from \"../internal/config\";\nimport { createContext, useContext, useRef, ReactNode, PropsWithChildren } from \"react\";\n\nexport type LoveUrlProviderProps = {\n    options: Partial<LoveUrlConfig>\n}\n\nexport type LoveUrlContextApi = {}\n\nconst LoveUrlContext = createContext<LoveUrlContextApi>({});\n\nexport const useLoveUrlProvider = () => useContext<LoveUrlContextApi>(LoveUrlContext);\n\n/** A config provider for using loveUrl with react  */\nexport const LoveUrlProvider = ({ options, children }: LoveUrlProviderProps & PropsWithChildren) => {\n    const configRef = useRef(initializeLoveUrl(options))\n\n    return <LoveUrlContext.Provider value={configRef.current}>\n        {(children as ReactNode)}\n    </LoveUrlContext.Provider>;\n\n\n\n\n}"]}