{"version":3,"sources":["../src/internal/loveUrl.ts"],"names":["initializeLoveUrl","buildSearchParamsQueryString","loveUrl","newParams","url","currentParams","anchor","persistAnchor","relative","GLOBAL_CONFIG","_url","_currentParams","malformed","isAbsolute","_params","newAnchor","paramsWithoutAnchor","existingAnchor"],"mappings":"iFA4EAA,CAAAA,CAAkB,CAAE,eAAgBC,CAA6B,CAAC,EAE3D,IAAMC,CAAAA,CAAU,CACrBC,CAAAA,CACA,CACE,GAAA,CAAAC,EACA,aAAA,CAAAC,CAAAA,CACA,OAAAC,CAAAA,CACA,aAAA,CAAAC,EACA,QAAA,CAAAC,CAAAA,CAAWC,GAAAA,CAAc,eAC3B,CAAA,CAAoB,KACT,CACX,GAAI,CAACC,CAAAA,CAAMC,CAAAA,CAAgBC,CAAS,CAAA,CAAA,CAClCR,CAAAA,EAAOK,GAAAA,CAAc,WAAA,EAAY,EACjC,KAAA,CAAM,GAAG,CAAA,CAEX,GAAIG,EACF,MAAM,IAAI,MACR,CAAA,wBAAA,EACER,CAAAA,EAAOK,GAAAA,CAAc,WAAA,EACvB,CAAA;AAAA,2DAAA,CACF,EAGF,GAAID,CAAAA,EAAY,CAACJ,CAAAA,CAAK,CAEpB,IAAMS,CAAAA,CAAaH,CAAAA,CAAK,KAAA,CAAM,uBAAuB,CAAA,CAEjDG,CAAAA,EAAcA,EAAW,CAAC,CAAA,GAC5BH,EAAOG,CAAAA,CAAW,CAAC,CAAA,EAEvB,CAEA,IAAIC,CAAAA,CACFH,CAAAA,EAAkBN,IAAkB,IAAA,CAAOM,CAAAA,CAAiBN,EAE1DS,CAAAA,EAAWA,CAAAA,CAAQ,CAAC,CAAA,GAAM,MAC5BA,CAAAA,CAAUA,CAAAA,CAAQ,MAAM,CAAC,CAAA,CAAA,CAG3B,IAAIC,CAAAA,CAAY,EAAA,CAMhB,GAJIT,CAAAA,GACFS,EAAY,CAAA,CAAA,EAAIT,CAAM,IAGpBQ,CAAAA,EACEA,CAAAA,CAAQ,SAAS,GAAG,CAAA,CAAG,CACzB,GAAM,CAACE,CAAAA,CAAqBC,CAAc,EAAIH,CAAAA,CAAQ,KAAA,CAAM,GAAG,CAAA,CAC/DA,CAAAA,CAAUE,CAAAA,CAENT,CAAAA,EAAiB,CAACD,CAAAA,GACpBS,CAAAA,CAAY,IAAIE,CAAc,CAAA,CAAA,EAElC,CAUF,OAPa,CAAA,EAAGP,CAAI,CAAA,EAAGD,IAAc,cAAA,CACnCN,CAAAA,CACAW,CACF,CAAC,CAAA,EAAGC,CAAS,CAAA,CAKf","file":"chunk-NHOP7XMB.js","sourcesContent":["/**\n * ## Use this util to easily preserve state in the URL\n * It's meant to be used with `router`, `Links` and `window.history`\n * It's also recommended together to use with `parseSearchParams`\n * @param url the target url, use the current one to add new params\n * @param newParams new params to be assigned or re assigned, undefined will delete\n * @param currentParams**[optional]** your current params to preserve, by default it takes all params from window, pass null to delete all\n * @param anchor**[optional]** scroll to any element with this id\n * [see the docs](https://stackoverflow.com/questions/24739126/scroll-to-a-specific-element-using-html)\n * @param _paramsBuilder**[testing]** do not change this, it is implemented\n * like this to allow for testing through dependency injection\n * read [vitest mocking pitfalls](https://vitest.dev/guide/mocking#mocking-pitfalls)\n * ### Code sample:\n * ```tsx\n * import { useSearchParams, useRouter } from 'next/router';\n *\n * function UserDataComponent() {\n *  const params = useSearchParams<{name: string, age: number}>();\n *  const {name, age} = parseSearchParams(params);\n *  const router = useRouter()\n *\n *  // This will scrollBack to top\n *  const updateAge = (newAge: number) => {\n *   //               ðŸ‘‡âœ¨\n *   router.replace(loveUrl(ROUTES.EXAMPLE_PAGE, {age: newAge});\n *  }\n *\n *  // This will not scroll back to top\n *  const onChangeName = (e) => {\n *   //                            ðŸ‘‡âœ¨\n *   window.history.replaceState(loveUrl(ROUTES.EXAMPLE_PAGE, {name: e.target.value});\n *   // alternatively use router with {scroll: false}\n *   route.replace(loveUrl(ROUTES.EXAMPLE_PAGE, {name: e.target.value}), {scroll: false});\n *  }\n *\n *  return (\n *    <div>\n *      <h1>{name}</h1>\n *      <h2>is {age} years old<h2>\n *      <p>Update Name</p>\n *      <label>\n *        Name\n *        <input value={name} onChange={onChangeName} />\n *      </label>\n *      <p>Update Age</p>\n *      <button onClick={() => updateAge(age + 1)}>+</button>\n *      <button onClick={() => updateAge(age + 1)}>-</button>\n *      <Link\n *        prefetch={false}>\n *        //       ðŸ‘‡âœ¨     passing null here to delete previous paramsðŸ‘‡âœ¨\n *        href={loveUrl(ROUTES.EXAMPLE_PAGE, {name: \"Rick\",age: 30}, null)}\n *        See Rick's Data\n *      </Link>\n *    </div>\n *  )\n * }\n * ```\n **/\n\nimport {\n  ParamsObject,\n  buildSearchParamsQueryString,\n} from \"./buildSearchParams\";\nimport { GLOBAL_CONFIG, initializeLoveUrl } from \"./config\";\n\nexport type LoveUrlOptions = {\n  /** Current un-parsed params; by default all params all preserved; pass null to ignore all and build a new url. */\n  currentParams?: string | null | undefined;\n  /** Useful for scroll interactions, will be removed unless specified */\n  anchor?: string | null;\n  persistAnchor?: boolean;\n  /** an absolute url or relative path that can have params or even an anchor */\n  url?: string;\n  relative?: boolean;\n};\n\ninitializeLoveUrl({ _paramsBuilder: buildSearchParamsQueryString });\n\nexport const loveUrl = <T>(\n  newParams: ParamsObject<T>,\n  {\n    url,\n    currentParams,\n    anchor,\n    persistAnchor,\n    relative = GLOBAL_CONFIG.defaultRelative,\n  }: LoveUrlOptions = {}\n): string => {\n  let [_url, _currentParams, malformed] = (\n    url || GLOBAL_CONFIG.urlProvider()\n  ).split(\"?\");\n\n  if (malformed) {\n    throw new Error(\n      `Malformed URL detected: ${\n        url || GLOBAL_CONFIG.urlProvider()\n      } \\nUrl seems to have more than a single query delimiter -> \"?\"`\n    );\n  }\n\n  if (relative && !url) {\n    /** checks for the url and grabs the relative path */\n    const isAbsolute = _url.match(/\\w\\.\\w{3}(\\/[\\w]+.*$)/);\n\n    if (isAbsolute && isAbsolute[1]) {\n      _url = isAbsolute[1];\n    }\n  }\n\n  let _params =\n    _currentParams && currentParams !== null ? _currentParams : currentParams;\n\n  if (_params && _params[0] === \"?\") {\n    _params = _params.slice(1);\n  }\n\n  let newAnchor = \"\";\n\n  if (anchor) {\n    newAnchor = `#${anchor}`;\n  }\n\n  if (_params) {\n    if (_params.includes(\"#\")) {\n      const [paramsWithoutAnchor, existingAnchor] = _params.split(\"#\");\n      _params = paramsWithoutAnchor;\n\n      if (persistAnchor && !anchor) {\n        newAnchor = `#${existingAnchor}`;\n      }\n    }\n  }\n\n  let newUrl = `${_url}${GLOBAL_CONFIG._paramsBuilder(\n    newParams,\n    _params\n  )}${newAnchor}`;\n\n  // Anchor is not preserved by default as it is assumed the intention is not to scroll back to the same place in every interaction\n\n  return newUrl;\n};\n\nexport type LoveUrlParams<T> = Parameters<typeof loveUrl<T>>;\n"]}